"""
Задание 1.

Выполните профилирование памяти в скриптах
Проанализировать результат и определить программы с
наиболее эффективным использованием памяти.

Примечание: Для анализа возьмите любые 1-5 ваших разных скриптов!.
Сделать их разные реализации.

Можно взять задачи с курса Основ
или с текущего курса Алгоритмов

Результаты анализа вставьте в виде комментариев к коду.
Также укажите в комментариях версию Python и разрядность вашей ОС.

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО

Попытайтесь дополнительно свой декоратор используя ф-цию memory_usage из memory_profiler
С одновременным замером времени (timeit.default_timer())!
"""

from memory_profiler import memory_usage
from timeit import default_timer
from random import randint


def calc_t_mem(func):
    def mem_time(*args, **kwargs):
        for i in range(3):
            start_t = default_timer()
            start_m = memory_usage()
            func(*args)
            end_t = default_timer()
            end_m = memory_usage()
            m_res = end_m[0] - start_m[0]
            t_res = end_t - start_t
            print(f'{i} шаг. Время выполнения =  {t_res}, используемая память = {m_res}')
    return mem_time


list_1 = list(randint(100, 1000) for i in range(100000000))


@calc_t_mem
def min_n(n):
    lst_inp = list(randint(100, 1000) for i in range(n))
    min_val = lst_inp[0]
    for i in lst_inp[1:]:
        if i < min_val:
            min_val = i
    return min_val


min_n(10000000)

'''Python 3.8, 64 разрядная ОС
В данном случае был произведен расчет времени и памяти с использованием самописного декоратора.
Так как метка испоьзуемой памяти снимается после выполнения функции, то было решено взять функцию, с формированием 
массива внутри, так как при приходе массива извне память была бы нулевая, что видно из прошлых реализаций. 
Функция была запущена трижды, после первого раза, видимо, сохранилась ссылка на массив, 
после чего дополнительная память не выделялась.

0 шаг. Время выполнения =  8.514626500000006, используемая память = 0.05859375
1 шаг. Время выполнения =  8.364801199999988, используемая память = 0.0
2 шаг. Время выполнения =  8.473394000000013, используемая память = 0.0
'''