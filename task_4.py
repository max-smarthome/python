"""
Задание 4.

Приведены два алгоритма. В них определяется число,
которое встречается в массиве чаще всего.

Сделайте профилировку каждого алгоритма через timeit

Попытайтесь написать третью версию, которая будет самой быстрой.
Сделайте замеры и опишите, получилось ли у вас ускорить задачу.
"""
import timeit

array = [1, 3, 1, 3, 4, 5, 1, 3, 4, 5, 5, 3]


def func_1():
    m = 0
    num = 0
    for i in array:
        count = array.count(i)
        if count > m:
            m = count
            num = i
    return f'Чаще всего встречается число {num}, ' \
           f'оно появилось в массиве {m} раз(а)'


def func_2():
    new_array = []
    for el in array:
        count2 = array.count(el)
        new_array.append(count2)

    max_2 = max(new_array)
    elem = array[new_array.index(max_2)]
    return f'Чаще всего встречается число {elem}, ' \
           f'оно появилось в массиве {max_2} раз(а)'


def func_3():
    max_num = sorted(array, key=lambda x: array.count(x))[0]
    return f'Чаще всего встречается число {max_num}, ' \
           f'оно появилось в массиве {array.count(max_num)} раз(а)'


def func_4():
    max_num = max(set(array), key=array.count)
    return f'Чаще всего встречается число {max_num}, ' \
           f'оно появилось в массиве {array.count(max_num)} раз(а)'


print(func_1())
print(func_2())
print(func_3())
print(func_4())

print(timeit.timeit("func_1()", setup="from __main__ import func_1"))
print(timeit.timeit("func_2()", setup="from __main__ import func_2"))
print(timeit.timeit("func_3()", setup="from __main__ import func_3"))
print(timeit.timeit("func_4()", setup="from __main__ import func_4"))

'''2.3510332
2.7187579
2.9488563
1.3943793000000007'''

'''Была попытка написать две функции для данной задачи. В первом случае оптимизация не удалась
(На самом деле это было очевидно еще на этапе написания, так как функция sort обладает сложность O(NlogN)), 
в данном же случае функция sort применяется дважды.
 Вторая по сложности 2 функция, так как создается новый массив, при этом пробегаются все эелемнты первого массива,
после чего ищется максимум в новом массиве, что тоже эквивалентно анализу всего массива.
 Третья по сложности первая функция, но они не сильно лучше второй. 
 Она не очень хороша, так как в ней в ней все равно пробегается весь массив.
 Самая лучшая - четвертая фукнция, так как в ней сразу определяется максимум из количества "входов" числа в массив'''
