"""
Задание 1.

Выполните профилирование памяти в скриптах
Проанализировать результат и определить программы с
наиболее эффективным использованием памяти.

Примечание: Для анализа возьмите любые 1-5 ваших разных скриптов!.
Сделать их разные реализации.

Можно взять задачи с курса Основ
или с текущего курса Алгоритмов

Результаты анализа вставьте в виде комментариев к коду.
Также укажите в комментариях версию Python и разрядность вашей ОС.

ВНИМАНИЕ: ЗАДАНИЯ, В КОТОРЫХ БУДУТ ГОЛЫЕ ЦИФРЫ ЗАМЕРОВ (БЕЗ АНАЛИТИКИ)
БУДУТ ПРИНИМАТЬСЯ С ОЦЕНКОЙ УДОВЛЕТВОРИТЕЛЬНО

Попытайтесь дополнительно свой декоратор используя ф-цию memory_usage из memory_profiler
С одновременным замером времени (timeit.default_timer())!
"""

from memory_profiler import profile
from random import randint

list_1 = list(randint(100, 1000) for i in range(1000000))


# функция поиска нименьшего значения
@profile
def min_n(n):
    lst_inp = list(randint(100, 1000) for i in range(n))
    min_val = lst_inp[0]
    for i in lst_inp[1:]:
        if i < min_val:
            min_val = i
    del lst_inp
    return min_val


min_n(1000000)

'''Python 3.8, 64 разрядная ОС
В данной реализации массив создается внутри функции, самый большой прирост идёт при формировании массива. Первая таблица
показана для функции без очистки памяти, вторая после добавления очистки. Из таблиц видно, что после запуска без очистки
в памяти осталось еще около 20 MiB, при этом после очистки память почти врернулась к значению, которое использует profile.
Отсюда следует, что избавляться от объектов, которые уже не используются, очень полезно и помогает экономить память

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    31    123.7 MiB    123.7 MiB           1   @profile
    32                                         def min_n():
    33    157.1 MiB -10888.9 MiB     2000003       lst_inp = list(randint(100, 1000) for i in range(1000000))
    34    157.1 MiB      0.0 MiB           1       min_val = lst_inp[0]
    35    164.7 MiB -35480.1 MiB     1000000       for i in lst_inp[1:]:
    36    164.7 MiB -35480.1 MiB      999999           if i < min_val:
    37    164.7 MiB      0.0 MiB           8               min_val = i
    38    157.0 MiB     -7.7 MiB           1       return min_val

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    33    123.8 MiB    123.8 MiB           1   @profile
    34                                         def min_n(n):
    35    158.1 MiB     34.2 MiB     2000003       lst_inp = list(randint(100, 1000) for i in range(n))
    36    158.1 MiB      0.0 MiB           1       min_val = lst_inp[0]
    37    165.7 MiB -34546.1 MiB     1000000       for i in lst_inp[1:]:
    38    165.7 MiB -34546.0 MiB      999999           if i < min_val:
    39    165.7 MiB      0.0 MiB           6               min_val = i
    40    125.1 MiB    -40.6 MiB           1       del lst_inp
    41    125.1 MiB      0.0 MiB           1       return min_val

'''
